{"ast":null,"code":"// Sample customer data based on the raw_BankChurners.csv structure\n// In a real application, this would fetch data from an API endpoint\nexport const generateCustomerData = () => {\n  const customers = [];\n\n  // Sample data representing the structure from raw_BankChurners.csv\n  const sampleCustomers = [{\n    CLIENTNUM: 768805383,\n    Attrition_Flag: \"Existing Customer\",\n    Customer_Age: 45,\n    Gender: \"M\",\n    Dependent_count: 3,\n    Education_Level: \"High School\",\n    Marital_Status: \"Married\",\n    Income_Category: \"$60K - $80K\",\n    Card_Category: \"Blue\",\n    Months_on_book: 39,\n    Total_Relationship_Count: 5,\n    Months_Inactive_12_mon: 1,\n    Contacts_Count_12_mon: 3,\n    Credit_Limit: 12691,\n    Total_Revolving_Bal: 777,\n    Avg_Open_To_Buy: 11914,\n    Total_Trans_Amt: 1144,\n    Total_Trans_Ct: 42,\n    Avg_Utilization_Ratio: 0.061\n  }, {\n    CLIENTNUM: 818770008,\n    Attrition_Flag: \"Existing Customer\",\n    Customer_Age: 49,\n    Gender: \"F\",\n    Dependent_count: 5,\n    Education_Level: \"Graduate\",\n    Marital_Status: \"Single\",\n    Income_Category: \"Less than $40K\",\n    Card_Category: \"Blue\",\n    Months_on_book: 44,\n    Total_Relationship_Count: 6,\n    Months_Inactive_12_mon: 1,\n    Contacts_Count_12_mon: 2,\n    Credit_Limit: 8256,\n    Total_Revolving_Bal: 864,\n    Avg_Open_To_Buy: 7392,\n    Total_Trans_Amt: 1291,\n    Total_Trans_Ct: 33,\n    Avg_Utilization_Ratio: 0.105\n  }, {\n    CLIENTNUM: 713982108,\n    Attrition_Flag: \"Existing Customer\",\n    Customer_Age: 51,\n    Gender: \"M\",\n    Dependent_count: 3,\n    Education_Level: \"Graduate\",\n    Marital_Status: \"Married\",\n    Income_Category: \"$80K - $120K\",\n    Card_Category: \"Blue\",\n    Months_on_book: 36,\n    Total_Relationship_Count: 4,\n    Months_Inactive_12_mon: 1,\n    Contacts_Count_12_mon: 0,\n    Credit_Limit: 3418,\n    Total_Revolving_Bal: 0,\n    Avg_Open_To_Buy: 3418,\n    Total_Trans_Amt: 1887,\n    Total_Trans_Ct: 20,\n    Avg_Utilization_Ratio: 0\n  }, {\n    CLIENTNUM: 769911858,\n    Attrition_Flag: \"Existing Customer\",\n    Customer_Age: 40,\n    Gender: \"F\",\n    Dependent_count: 4,\n    Education_Level: \"High School\",\n    Marital_Status: \"Unknown\",\n    Income_Category: \"Less than $40K\",\n    Card_Category: \"Blue\",\n    Months_on_book: 34,\n    Total_Relationship_Count: 3,\n    Months_Inactive_12_mon: 4,\n    Contacts_Count_12_mon: 1,\n    Credit_Limit: 3313,\n    Total_Revolving_Bal: 2517,\n    Avg_Open_To_Buy: 796,\n    Total_Trans_Amt: 1171,\n    Total_Trans_Ct: 20,\n    Avg_Utilization_Ratio: 0.76\n  }, {\n    CLIENTNUM: 860181079,\n    Attrition_Flag: \"Attrited Customer\",\n    Customer_Age: 42,\n    Gender: \"M\",\n    Dependent_count: 2,\n    Education_Level: \"Graduate\",\n    Marital_Status: \"Married\",\n    Income_Category: \"$40K - $60K\",\n    Card_Category: \"Silver\",\n    Months_on_book: 25,\n    Total_Relationship_Count: 2,\n    Months_Inactive_12_mon: 6,\n    Contacts_Count_12_mon: 4,\n    Credit_Limit: 5500,\n    Total_Revolving_Bal: 1200,\n    Avg_Open_To_Buy: 4300,\n    Total_Trans_Amt: 850,\n    Total_Trans_Ct: 15,\n    Avg_Utilization_Ratio: 0.22\n  }];\n\n  // Generate more sample customers based on the patterns\n  for (let i = 0; i < 100; i++) {\n    const baseCustomer = sampleCustomers[i % sampleCustomers.length];\n    const customer = {\n      ...baseCustomer,\n      CLIENTNUM: baseCustomer.CLIENTNUM + i,\n      Customer_Age: Math.floor(Math.random() * 40) + 25,\n      // Age 25-65\n      Attrition_Flag: Math.random() > 0.16 ? \"Existing Customer\" : \"Attrited Customer\",\n      // 16% churn rate\n      Credit_Limit: Math.floor(Math.random() * 30000) + 2000,\n      Total_Trans_Amt: Math.floor(Math.random() * 5000) + 500,\n      Total_Trans_Ct: Math.floor(Math.random() * 100) + 10,\n      Avg_Utilization_Ratio: Math.random() * 0.8\n    };\n    customers.push(customer);\n  }\n  return customers;\n};\n\n// Calculate churn risk based on customer attributes\nexport const calculateChurnRisk = customer => {\n  let riskScore = 0;\n\n  // Age factor\n  if (customer.Customer_Age > 60) riskScore += 10;else if (customer.Customer_Age < 30) riskScore += 15;\n\n  // Inactivity factor\n  if (customer.Months_Inactive_12_mon > 3) riskScore += 20;\n\n  // Contact frequency factor\n  if (customer.Contacts_Count_12_mon > 4) riskScore += 15;\n\n  // Utilization ratio factor\n  if (customer.Avg_Utilization_Ratio > 0.7) riskScore += 25;else if (customer.Avg_Utilization_Ratio < 0.1) riskScore += 10;\n\n  // Transaction activity factor\n  if (customer.Total_Trans_Ct < 20) riskScore += 20;\n\n  // Income category factor\n  if (customer.Income_Category === \"Less than $40K\") riskScore += 10;\n  return Math.min(riskScore, 100); // Cap at 100%\n};\n\n// Get risk level color\nexport const getRiskLevel = riskScore => {\n  if (riskScore <= 20) return {\n    level: 'Low',\n    color: 'text-green-600 bg-green-100'\n  };\n  if (riskScore <= 50) return {\n    level: 'Medium',\n    color: 'text-yellow-600 bg-yellow-100'\n  };\n  return {\n    level: 'High',\n    color: 'text-red-600 bg-red-100'\n  };\n};\n\n// Format currency\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(amount);\n};","map":{"version":3,"names":["generateCustomerData","customers","sampleCustomers","CLIENTNUM","Attrition_Flag","Customer_Age","Gender","Dependent_count","Education_Level","Marital_Status","Income_Category","Card_Category","Months_on_book","Total_Relationship_Count","Months_Inactive_12_mon","Contacts_Count_12_mon","Credit_Limit","Total_Revolving_Bal","Avg_Open_To_Buy","Total_Trans_Amt","Total_Trans_Ct","Avg_Utilization_Ratio","i","baseCustomer","length","customer","Math","floor","random","push","calculateChurnRisk","riskScore","min","getRiskLevel","level","color","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format"],"sources":["D:/AI Hackathon/UI/src/services/customerData.js"],"sourcesContent":["// Sample customer data based on the raw_BankChurners.csv structure\r\n// In a real application, this would fetch data from an API endpoint\r\nexport const generateCustomerData = () => {\r\n  const customers = [];\r\n  \r\n  // Sample data representing the structure from raw_BankChurners.csv\r\n  const sampleCustomers = [\r\n    {\r\n      CLIENTNUM: 768805383,\r\n      Attrition_Flag: \"Existing Customer\",\r\n      Customer_Age: 45,\r\n      Gender: \"M\",\r\n      Dependent_count: 3,\r\n      Education_Level: \"High School\",\r\n      Marital_Status: \"Married\",\r\n      Income_Category: \"$60K - $80K\",\r\n      Card_Category: \"Blue\",\r\n      Months_on_book: 39,\r\n      Total_Relationship_Count: 5,\r\n      Months_Inactive_12_mon: 1,\r\n      Contacts_Count_12_mon: 3,\r\n      Credit_Limit: 12691,\r\n      Total_Revolving_Bal: 777,\r\n      Avg_Open_To_Buy: 11914,\r\n      Total_Trans_Amt: 1144,\r\n      Total_Trans_Ct: 42,\r\n      Avg_Utilization_Ratio: 0.061\r\n    },\r\n    {\r\n      CLIENTNUM: 818770008,\r\n      Attrition_Flag: \"Existing Customer\",\r\n      Customer_Age: 49,\r\n      Gender: \"F\",\r\n      Dependent_count: 5,\r\n      Education_Level: \"Graduate\",\r\n      Marital_Status: \"Single\",\r\n      Income_Category: \"Less than $40K\",\r\n      Card_Category: \"Blue\",\r\n      Months_on_book: 44,\r\n      Total_Relationship_Count: 6,\r\n      Months_Inactive_12_mon: 1,\r\n      Contacts_Count_12_mon: 2,\r\n      Credit_Limit: 8256,\r\n      Total_Revolving_Bal: 864,\r\n      Avg_Open_To_Buy: 7392,\r\n      Total_Trans_Amt: 1291,\r\n      Total_Trans_Ct: 33,\r\n      Avg_Utilization_Ratio: 0.105\r\n    },\r\n    {\r\n      CLIENTNUM: 713982108,\r\n      Attrition_Flag: \"Existing Customer\",\r\n      Customer_Age: 51,\r\n      Gender: \"M\",\r\n      Dependent_count: 3,\r\n      Education_Level: \"Graduate\",\r\n      Marital_Status: \"Married\",\r\n      Income_Category: \"$80K - $120K\",\r\n      Card_Category: \"Blue\",\r\n      Months_on_book: 36,\r\n      Total_Relationship_Count: 4,\r\n      Months_Inactive_12_mon: 1,\r\n      Contacts_Count_12_mon: 0,\r\n      Credit_Limit: 3418,\r\n      Total_Revolving_Bal: 0,\r\n      Avg_Open_To_Buy: 3418,\r\n      Total_Trans_Amt: 1887,\r\n      Total_Trans_Ct: 20,\r\n      Avg_Utilization_Ratio: 0\r\n    },\r\n    {\r\n      CLIENTNUM: 769911858,\r\n      Attrition_Flag: \"Existing Customer\",\r\n      Customer_Age: 40,\r\n      Gender: \"F\",\r\n      Dependent_count: 4,\r\n      Education_Level: \"High School\",\r\n      Marital_Status: \"Unknown\",\r\n      Income_Category: \"Less than $40K\",\r\n      Card_Category: \"Blue\",\r\n      Months_on_book: 34,\r\n      Total_Relationship_Count: 3,\r\n      Months_Inactive_12_mon: 4,\r\n      Contacts_Count_12_mon: 1,\r\n      Credit_Limit: 3313,\r\n      Total_Revolving_Bal: 2517,\r\n      Avg_Open_To_Buy: 796,\r\n      Total_Trans_Amt: 1171,\r\n      Total_Trans_Ct: 20,\r\n      Avg_Utilization_Ratio: 0.76\r\n    },\r\n    {\r\n      CLIENTNUM: 860181079,\r\n      Attrition_Flag: \"Attrited Customer\",\r\n      Customer_Age: 42,\r\n      Gender: \"M\",\r\n      Dependent_count: 2,\r\n      Education_Level: \"Graduate\",\r\n      Marital_Status: \"Married\",\r\n      Income_Category: \"$40K - $60K\",\r\n      Card_Category: \"Silver\",\r\n      Months_on_book: 25,\r\n      Total_Relationship_Count: 2,\r\n      Months_Inactive_12_mon: 6,\r\n      Contacts_Count_12_mon: 4,\r\n      Credit_Limit: 5500,\r\n      Total_Revolving_Bal: 1200,\r\n      Avg_Open_To_Buy: 4300,\r\n      Total_Trans_Amt: 850,\r\n      Total_Trans_Ct: 15,\r\n      Avg_Utilization_Ratio: 0.22\r\n    }\r\n  ];\r\n\r\n  // Generate more sample customers based on the patterns\r\n  for (let i = 0; i < 100; i++) {\r\n    const baseCustomer = sampleCustomers[i % sampleCustomers.length];\r\n    const customer = {\r\n      ...baseCustomer,\r\n      CLIENTNUM: baseCustomer.CLIENTNUM + i,\r\n      Customer_Age: Math.floor(Math.random() * 40) + 25, // Age 25-65\r\n      Attrition_Flag: Math.random() > 0.16 ? \"Existing Customer\" : \"Attrited Customer\", // 16% churn rate\r\n      Credit_Limit: Math.floor(Math.random() * 30000) + 2000,\r\n      Total_Trans_Amt: Math.floor(Math.random() * 5000) + 500,\r\n      Total_Trans_Ct: Math.floor(Math.random() * 100) + 10,\r\n      Avg_Utilization_Ratio: Math.random() * 0.8\r\n    };\r\n    customers.push(customer);\r\n  }\r\n\r\n  return customers;\r\n};\r\n\r\n// Calculate churn risk based on customer attributes\r\nexport const calculateChurnRisk = (customer) => {\r\n  let riskScore = 0;\r\n  \r\n  // Age factor\r\n  if (customer.Customer_Age > 60) riskScore += 10;\r\n  else if (customer.Customer_Age < 30) riskScore += 15;\r\n  \r\n  // Inactivity factor\r\n  if (customer.Months_Inactive_12_mon > 3) riskScore += 20;\r\n  \r\n  // Contact frequency factor\r\n  if (customer.Contacts_Count_12_mon > 4) riskScore += 15;\r\n  \r\n  // Utilization ratio factor\r\n  if (customer.Avg_Utilization_Ratio > 0.7) riskScore += 25;\r\n  else if (customer.Avg_Utilization_Ratio < 0.1) riskScore += 10;\r\n  \r\n  // Transaction activity factor\r\n  if (customer.Total_Trans_Ct < 20) riskScore += 20;\r\n  \r\n  // Income category factor\r\n  if (customer.Income_Category === \"Less than $40K\") riskScore += 10;\r\n  \r\n  return Math.min(riskScore, 100); // Cap at 100%\r\n};\r\n\r\n// Get risk level color\r\nexport const getRiskLevel = (riskScore) => {\r\n  if (riskScore <= 20) return { level: 'Low', color: 'text-green-600 bg-green-100' };\r\n  if (riskScore <= 50) return { level: 'Medium', color: 'text-yellow-600 bg-yellow-100' };\r\n  return { level: 'High', color: 'text-red-600 bg-red-100' };\r\n};\r\n\r\n// Format currency\r\nexport const formatCurrency = (amount) => {\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0\r\n  }).format(amount);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
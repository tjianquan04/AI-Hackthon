{"ast":null,"code":"var _jsxFileName = \"D:\\\\AI Hackathon\\\\UI\\\\src\\\\components\\\\SegmentsAnalysis.js\";\nimport React from 'react';\nimport { ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Cell } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SegmentsAnalysis = () => {\n  // Sample data for bubble chart showing different customer segments\n  const data = [{\n    x: 25,\n    y: 15,\n    size: 800,\n    segment: 'High Spenders',\n    color: '#ef4444'\n  }, {\n    x: 35,\n    y: 25,\n    size: 1200,\n    segment: 'Avg Spenders',\n    color: '#f59e0b'\n  }, {\n    x: 45,\n    y: 35,\n    size: 600,\n    segment: 'Low Spenders',\n    color: '#3b82f6'\n  }, {\n    x: 55,\n    y: 45,\n    size: 400,\n    segment: 'Premium',\n    color: '#8b5cf6'\n  }, {\n    x: 65,\n    y: 55,\n    size: 300,\n    segment: 'VIP',\n    color: '#10b981'\n  }, {\n    x: 20,\n    y: 60,\n    size: 500,\n    segment: 'At Risk',\n    color: '#dc2626'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-lg font-semibold text-gray-900 mb-2\",\n      children: \"Which Segments Are Likely To Leave?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-sm text-gray-600 mb-4\",\n      children: \"Avg. Churn Risk vs Spending | \\u25CF = 1.2k Avg. Customers Per Segment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-64\",\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(ScatterChart, {\n          margin: {\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\",\n            stroke: \"#f0f0f0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            type: \"number\",\n            dataKey: \"x\",\n            name: \"spending\",\n            axisLine: false,\n            tickLine: false,\n            tick: {\n              fontSize: 12,\n              fill: '#6b7280'\n            },\n            domain: [0, 80]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            type: \"number\",\n            dataKey: \"y\",\n            name: \"churn_risk\",\n            axisLine: false,\n            tickLine: false,\n            tick: {\n              fontSize: 12,\n              fill: '#6b7280'\n            },\n            domain: [0, 70]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n            dataKey: \"size\",\n            data: data,\n            children: data.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n              fill: entry.color\n            }, `cell-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 grid grid-cols-2 gap-2 text-xs\",\n      children: data.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-3 h-3 rounded-full mr-2\",\n          style: {\n            backgroundColor: item.color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-600\",\n          children: item.segment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_c = SegmentsAnalysis;\nexport default SegmentsAnalysis;\nvar _c;\n$RefreshReg$(_c, \"SegmentsAnalysis\");","map":{"version":3,"names":["React","ScatterChart","Scatter","XAxis","YAxis","CartesianGrid","ResponsiveContainer","Cell","jsxDEV","_jsxDEV","SegmentsAnalysis","data","x","y","size","segment","color","children","className","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","stroke","type","dataKey","name","axisLine","tickLine","tick","fontSize","fill","domain","map","entry","index","item","style","backgroundColor","_c","$RefreshReg$"],"sources":["D:/AI Hackathon/UI/src/components/SegmentsAnalysis.js"],"sourcesContent":["import React from 'react';\r\nimport { ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Cell } from 'recharts';\r\n\r\nconst SegmentsAnalysis = () => {\r\n  // Sample data for bubble chart showing different customer segments\r\n  const data = [\r\n    { x: 25, y: 15, size: 800, segment: 'High Spenders', color: '#ef4444' },\r\n    { x: 35, y: 25, size: 1200, segment: 'Avg Spenders', color: '#f59e0b' },\r\n    { x: 45, y: 35, size: 600, segment: 'Low Spenders', color: '#3b82f6' },\r\n    { x: 55, y: 45, size: 400, segment: 'Premium', color: '#8b5cf6' },\r\n    { x: 65, y: 55, size: 300, segment: 'VIP', color: '#10b981' },\r\n    { x: 20, y: 60, size: 500, segment: 'At Risk', color: '#dc2626' }\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Which Segments Are Likely To Leave?</h3>\r\n      <p className=\"text-sm text-gray-600 mb-4\">Avg. Churn Risk vs Spending | ‚óè = 1.2k Avg. Customers Per Segment</p>\r\n      \r\n      <div className=\"h-64\">\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <ScatterChart margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\r\n            <XAxis \r\n              type=\"number\" \r\n              dataKey=\"x\" \r\n              name=\"spending\" \r\n              axisLine={false}\r\n              tickLine={false}\r\n              tick={{ fontSize: 12, fill: '#6b7280' }}\r\n              domain={[0, 80]}\r\n            />\r\n            <YAxis \r\n              type=\"number\" \r\n              dataKey=\"y\" \r\n              name=\"churn_risk\" \r\n              axisLine={false}\r\n              tickLine={false}\r\n              tick={{ fontSize: 12, fill: '#6b7280' }}\r\n              domain={[0, 70]}\r\n            />\r\n            <Scatter dataKey=\"size\" data={data}>\r\n              {data.map((entry, index) => (\r\n                <Cell key={`cell-${index}`} fill={entry.color} />\r\n              ))}\r\n            </Scatter>\r\n          </ScatterChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n\r\n      {/* Legend */}\r\n      <div className=\"mt-4 grid grid-cols-2 gap-2 text-xs\">\r\n        {data.map((item, index) => (\r\n          <div key={index} className=\"flex items-center\">\r\n            <div \r\n              className=\"w-3 h-3 rounded-full mr-2\" \r\n              style={{ backgroundColor: item.color }}\r\n            ></div>\r\n            <span className=\"text-gray-600\">{item.segment}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SegmentsAnalysis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}